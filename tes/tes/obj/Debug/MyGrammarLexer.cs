//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\study\Level 4\First semester\compiler\LABS\compiler_course_topics-main\topecs\New folder\tes\tes\MyGrammar.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace tes {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MyGrammarLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, ID=15, NUMBER=16, WS=17;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "ID", "NUMBER", "WS"
	};


	public MyGrammarLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'list<int>'", "'='", "'{'", "','", "'}'", "';'", "'print'", "'('", 
		"'['", "']'", "')'", "'.add('", "'.remove('", "'.contain('"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "ID", "NUMBER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MyGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x13s\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6"+
		"\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v"+
		"\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\x10\x3\x10\a\x10\x63\n\x10\f\x10\xE\x10\x66\v\x10\x3"+
		"\x11\x6\x11i\n\x11\r\x11\xE\x11j\x3\x12\x6\x12n\n\x12\r\x12\xE\x12o\x3"+
		"\x12\x3\x12\x2\x2\x2\x13\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2"+
		"\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D"+
		"\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13\x3\x2\x6\x5\x2\x43\\\x61\x61\x63|\x6"+
		"\x2\x32;\x43\\\x61\x61\x63|\x3\x2\x32;\x5\x2\v\f\xF\xF\"\"u\x2\x3\x3\x2"+
		"\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2"+
		"\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3"+
		"\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2"+
		"\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2"+
		"\x2#\x3\x2\x2\x2\x3%\x3\x2\x2\x2\x5/\x3\x2\x2\x2\a\x31\x3\x2\x2\x2\t\x33"+
		"\x3\x2\x2\x2\v\x35\x3\x2\x2\x2\r\x37\x3\x2\x2\x2\xF\x39\x3\x2\x2\x2\x11"+
		"?\x3\x2\x2\x2\x13\x41\x3\x2\x2\x2\x15\x43\x3\x2\x2\x2\x17\x45\x3\x2\x2"+
		"\x2\x19G\x3\x2\x2\x2\x1BM\x3\x2\x2\x2\x1DV\x3\x2\x2\x2\x1F`\x3\x2\x2\x2"+
		"!h\x3\x2\x2\x2#m\x3\x2\x2\x2%&\an\x2\x2&\'\ak\x2\x2\'(\au\x2\x2()\av\x2"+
		"\x2)*\a>\x2\x2*+\ak\x2\x2+,\ap\x2\x2,-\av\x2\x2-.\a@\x2\x2.\x4\x3\x2\x2"+
		"\x2/\x30\a?\x2\x2\x30\x6\x3\x2\x2\x2\x31\x32\a}\x2\x2\x32\b\x3\x2\x2\x2"+
		"\x33\x34\a.\x2\x2\x34\n\x3\x2\x2\x2\x35\x36\a\x7F\x2\x2\x36\f\x3\x2\x2"+
		"\x2\x37\x38\a=\x2\x2\x38\xE\x3\x2\x2\x2\x39:\ar\x2\x2:;\at\x2\x2;<\ak"+
		"\x2\x2<=\ap\x2\x2=>\av\x2\x2>\x10\x3\x2\x2\x2?@\a*\x2\x2@\x12\x3\x2\x2"+
		"\x2\x41\x42\a]\x2\x2\x42\x14\x3\x2\x2\x2\x43\x44\a_\x2\x2\x44\x16\x3\x2"+
		"\x2\x2\x45\x46\a+\x2\x2\x46\x18\x3\x2\x2\x2GH\a\x30\x2\x2HI\a\x63\x2\x2"+
		"IJ\a\x66\x2\x2JK\a\x66\x2\x2KL\a*\x2\x2L\x1A\x3\x2\x2\x2MN\a\x30\x2\x2"+
		"NO\at\x2\x2OP\ag\x2\x2PQ\ao\x2\x2QR\aq\x2\x2RS\ax\x2\x2ST\ag\x2\x2TU\a"+
		"*\x2\x2U\x1C\x3\x2\x2\x2VW\a\x30\x2\x2WX\a\x65\x2\x2XY\aq\x2\x2YZ\ap\x2"+
		"\x2Z[\av\x2\x2[\\\a\x63\x2\x2\\]\ak\x2\x2]^\ap\x2\x2^_\a*\x2\x2_\x1E\x3"+
		"\x2\x2\x2`\x64\t\x2\x2\x2\x61\x63\t\x3\x2\x2\x62\x61\x3\x2\x2\x2\x63\x66"+
		"\x3\x2\x2\x2\x64\x62\x3\x2\x2\x2\x64\x65\x3\x2\x2\x2\x65 \x3\x2\x2\x2"+
		"\x66\x64\x3\x2\x2\x2gi\t\x4\x2\x2hg\x3\x2\x2\x2ij\x3\x2\x2\x2jh\x3\x2"+
		"\x2\x2jk\x3\x2\x2\x2k\"\x3\x2\x2\x2ln\t\x5\x2\x2ml\x3\x2\x2\x2no\x3\x2"+
		"\x2\x2om\x3\x2\x2\x2op\x3\x2\x2\x2pq\x3\x2\x2\x2qr\b\x12\x2\x2r$\x3\x2"+
		"\x2\x2\x6\x2\x64jo\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace tes
