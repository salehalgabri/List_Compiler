//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\study\Level 4\First semester\compiler\LABS\compiler_course_topics-main\topecs\New folder\tes\tes\MyGrammar.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace tes {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MyGrammarParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, ID=15, NUMBER=16, WS=17;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_listDeclaration = 2, RULE_printStatement = 3, 
		RULE_addStatement = 4, RULE_removeStatement = 5, RULE_containStatement = 6;
	public static readonly string[] ruleNames = {
		"program", "statement", "listDeclaration", "printStatement", "addStatement", 
		"removeStatement", "containStatement"
	};

	private static readonly string[] _LiteralNames = {
		null, "'list<int>'", "'='", "'{'", "','", "'}'", "';'", "'print'", "'('", 
		"'['", "']'", "')'", "'.add('", "'.remove('", "'.contain('"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "ID", "NUMBER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MyGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MyGrammarParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 14; statement();
				}
				}
				State = 17;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__6) | (1L << ID))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ListDeclarationContext listDeclaration() {
			return GetRuleContext<ListDeclarationContext>(0);
		}
		public PrintStatementContext printStatement() {
			return GetRuleContext<PrintStatementContext>(0);
		}
		public AddStatementContext addStatement() {
			return GetRuleContext<AddStatementContext>(0);
		}
		public RemoveStatementContext removeStatement() {
			return GetRuleContext<RemoveStatementContext>(0);
		}
		public ContainStatementContext containStatement() {
			return GetRuleContext<ContainStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 24;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 19; listDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 20; printStatement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 21; addStatement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 22; removeStatement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 23; containStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListDeclarationContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MyGrammarParser.ID, 0); }
		public ITerminalNode[] NUMBER() { return GetTokens(MyGrammarParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(MyGrammarParser.NUMBER, i);
		}
		public ListDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterListDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitListDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListDeclarationContext listDeclaration() {
		ListDeclarationContext _localctx = new ListDeclarationContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_listDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26; Match(T__0);
			State = 27; Match(ID);
			State = 28; Match(T__1);
			State = 29; Match(T__2);
			State = 30; Match(NUMBER);
			State = 35;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__3) {
				{
				{
				State = 31; Match(T__3);
				State = 32; Match(NUMBER);
				}
				}
				State = 37;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 38; Match(T__4);
			State = 39; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MyGrammarParser.ID, 0); }
		public ITerminalNode NUMBER() { return GetToken(MyGrammarParser.NUMBER, 0); }
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterPrintStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitPrintStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_printStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41; Match(T__6);
			State = 42; Match(T__7);
			State = 43; Match(ID);
			State = 44; Match(T__8);
			State = 45; Match(NUMBER);
			State = 46; Match(T__9);
			State = 47; Match(T__10);
			State = 48; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddStatementContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MyGrammarParser.ID, 0); }
		public ITerminalNode NUMBER() { return GetToken(MyGrammarParser.NUMBER, 0); }
		public AddStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterAddStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitAddStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddStatementContext addStatement() {
		AddStatementContext _localctx = new AddStatementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_addStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(ID);
			State = 51; Match(T__11);
			State = 52; Match(NUMBER);
			State = 53; Match(T__10);
			State = 54; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveStatementContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MyGrammarParser.ID, 0); }
		public ITerminalNode NUMBER() { return GetToken(MyGrammarParser.NUMBER, 0); }
		public RemoveStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterRemoveStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitRemoveStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemoveStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemoveStatementContext removeStatement() {
		RemoveStatementContext _localctx = new RemoveStatementContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_removeStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; Match(ID);
			State = 57; Match(T__12);
			State = 58; Match(NUMBER);
			State = 59; Match(T__10);
			State = 60; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContainStatementContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MyGrammarParser.ID, 0); }
		public ITerminalNode NUMBER() { return GetToken(MyGrammarParser.NUMBER, 0); }
		public ContainStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_containStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterContainStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitContainStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContainStatementContext containStatement() {
		ContainStatementContext _localctx = new ContainStatementContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_containStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; Match(ID);
			State = 63; Match(T__13);
			State = 64; Match(NUMBER);
			State = 65; Match(T__10);
			State = 66; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x13G\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x3\x2\x6"+
		"\x2\x12\n\x2\r\x2\xE\x2\x13\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x1B\n"+
		"\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4$\n\x4\f\x4\xE\x4\'"+
		"\v\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x2\x2\x2\t\x2\x2\x4\x2\x6\x2\b\x2"+
		"\n\x2\f\x2\xE\x2\x2\x2\x45\x2\x11\x3\x2\x2\x2\x4\x1A\x3\x2\x2\x2\x6\x1C"+
		"\x3\x2\x2\x2\b+\x3\x2\x2\x2\n\x34\x3\x2\x2\x2\f:\x3\x2\x2\x2\xE@\x3\x2"+
		"\x2\x2\x10\x12\x5\x4\x3\x2\x11\x10\x3\x2\x2\x2\x12\x13\x3\x2\x2\x2\x13"+
		"\x11\x3\x2\x2\x2\x13\x14\x3\x2\x2\x2\x14\x3\x3\x2\x2\x2\x15\x1B\x5\x6"+
		"\x4\x2\x16\x1B\x5\b\x5\x2\x17\x1B\x5\n\x6\x2\x18\x1B\x5\f\a\x2\x19\x1B"+
		"\x5\xE\b\x2\x1A\x15\x3\x2\x2\x2\x1A\x16\x3\x2\x2\x2\x1A\x17\x3\x2\x2\x2"+
		"\x1A\x18\x3\x2\x2\x2\x1A\x19\x3\x2\x2\x2\x1B\x5\x3\x2\x2\x2\x1C\x1D\a"+
		"\x3\x2\x2\x1D\x1E\a\x11\x2\x2\x1E\x1F\a\x4\x2\x2\x1F \a\x5\x2\x2 %\a\x12"+
		"\x2\x2!\"\a\x6\x2\x2\"$\a\x12\x2\x2#!\x3\x2\x2\x2$\'\x3\x2\x2\x2%#\x3"+
		"\x2\x2\x2%&\x3\x2\x2\x2&(\x3\x2\x2\x2\'%\x3\x2\x2\x2()\a\a\x2\x2)*\a\b"+
		"\x2\x2*\a\x3\x2\x2\x2+,\a\t\x2\x2,-\a\n\x2\x2-.\a\x11\x2\x2./\a\v\x2\x2"+
		"/\x30\a\x12\x2\x2\x30\x31\a\f\x2\x2\x31\x32\a\r\x2\x2\x32\x33\a\b\x2\x2"+
		"\x33\t\x3\x2\x2\x2\x34\x35\a\x11\x2\x2\x35\x36\a\xE\x2\x2\x36\x37\a\x12"+
		"\x2\x2\x37\x38\a\r\x2\x2\x38\x39\a\b\x2\x2\x39\v\x3\x2\x2\x2:;\a\x11\x2"+
		"\x2;<\a\xF\x2\x2<=\a\x12\x2\x2=>\a\r\x2\x2>?\a\b\x2\x2?\r\x3\x2\x2\x2"+
		"@\x41\a\x11\x2\x2\x41\x42\a\x10\x2\x2\x42\x43\a\x12\x2\x2\x43\x44\a\r"+
		"\x2\x2\x44\x45\a\b\x2\x2\x45\xF\x3\x2\x2\x2\x5\x13\x1A%";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace tes
